import os
import wave
import numpy as np
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import matplotlib.pyplot as plt
import soundfile as sf
from scipy.io import wavfile
from scipy.signal import spectrogram
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from mpl_toolkits.mplot3d import Axes3D


class WAVAnalyzer:
    def __init__(self, root):
        self.root = root
        self.root.title("WAV File Analyzer")
        self.root.geometry("600x350")  # –£–º–µ–Ω—å—à–∏–ª –≤—ã—Å–æ—Ç—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        self.root.minsize(500, 300)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.root.resizable(True, True)  # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å –æ–∫–Ω–æ

        self.data = None
        self.sample_rate = None

        # –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.main_frame = tk.Frame(root, bg="#F5F5F5")
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        self.top_frame = tk.Frame(self.main_frame, bg="#F5F5F5")
        self.top_frame.pack(fill="x")

        # –ö–Ω–æ–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π üìÇ (–ø–∞–ø–∫–∞)
        self.load_button = ttk.Button(self.top_frame, text="üìÇ", command=self.select_file, width=3)
        self.load_button.pack(side="left", padx=10)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        self.file_label = tk.Label(self.top_frame, text="No file loaded", font=("Arial", 12), bg="#F5F5F5")
        self.file_label.pack(side="left", padx=10)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        self.info_label = tk.Label(self.main_frame, text="", font=("Arial", 10), bg="#F5F5F5", justify="left")
        self.info_label.pack(fill="x", padx=10, pady=5)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.button_frame = tk.Frame(self.main_frame, bg="#F5F5F5")
        self.button_frame.pack(fill="both", padx=10, pady=10)

        self.buttons = {
            "Waveform": ttk.Button(self.button_frame, text="üìà Show Waveform", command=self.show_waveform, state="disabled"),
            "Spectrogram": ttk.Button(self.button_frame, text="üéõ Show Spectrogram", command=self.show_spectrogram, state="disabled"),
            "DFT": ttk.Button(self.button_frame, text="üìä Show DFT Spectrum", command=self.show_dft, state="disabled"),
            "3D Spectrogram": ttk.Button(self.button_frame, text="üåç Show 3D Spectrogram", command=self.show_3d_spectrogram, state="disabled"),
        }

        for button in self.buttons.values():
            button.pack(pady=5, fill="x")



    def select_file(self):
        """ Opens a file dialog and loads WAV file. """
        file_path = filedialog.askopenfilename(filetypes=[("WAV Files", "*.wav")])
        if file_path:
            self.analyze_wav(file_path)

    def get_wav_bit_depth(self, file_path):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∏—Ç–Ω–æ—Å—Ç—å WAV —Ñ–∞–π–ª–∞."""
        with wave.open(file_path, 'rb') as wav_file:
            sample_width = wav_file.getsampwidth()  # –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É —Å–µ–º–ø–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
            bit_depth = sample_width * 8  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∏—Ç—ã (8 –±–∏—Ç –Ω–∞ –±–∞–π—Ç)
            return bit_depth

    def analyze_wav(self, file_path):
        """ Reads the WAV file and updates the UI. """
        try:
            file_name = os.path.basename(file_path)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∏—Ç–Ω–æ—Å—Ç—å WAV-—Ñ–∞–π–ª–∞
            bit_depth = bit_depth = self.get_wav_bit_depth(file_path)


            # Load WAV file
            try:
                sample_rate, data = wavfile.read(file_path)
                data = data.astype(np.float32) / np.max(np.abs(data))
                print("Loaded using scipy.io.wavfile")
            except Exception as e:
                print("Failed to load with scipy:", e)
                data, sample_rate = sf.read(file_path, always_2d=True)
                print("Loaded using soundfile.read")

            if len(data.shape) > 1 and data.shape[1] > 1:
                data = data.mean(axis=1)  # Convert to mono

            self.data = data
            self.sample_rate = sample_rate

            min_val, max_val = np.min(data), np.max(data)
            mean_val = np.mean(data)
            rms = np.sqrt(np.mean(data ** 2))

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.file_label.config(text=f"üìÇ {file_name}")
            self.info_label.config(
                text=f"üéµ Sample rate: {sample_rate} Hz\n"
                     f"üìù Bit depth: {bit_depth}-bit\n"  # –í–µ—Ä–Ω—É–ª–∏ –±–∏—Ç–Ω–æ—Å—Ç—å
                     f"‚è≥ Duration: {len(data) / sample_rate:.2f} sec\n"
                     f"üîé Min: {min_val:.4f}, Max: {max_val:.4f}\n"
                     f"üìâ Mean: {mean_val:.4f}, RMS: {rms:.4f}"
            )

            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
            for button in self.buttons.values():
                button.config(state="normal")

        except Exception as e:
            messagebox.showerror("Error", f"Failed to process the file!\n{str(e)}")

    def check_data(self):
        """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤. """
        if self.data is None:
            messagebox.showerror("Error", "Please load a WAV file first!")
            return False
        return True

    def show_waveform(self):
        if not self.check_data():
            return
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.plot(np.linspace(0, len(self.data) / self.sample_rate, num=len(self.data)), self.data, color='blue')
        ax.set_title("Waveform")
        ax.set_xlabel("Time (sec)")
        ax.set_ylabel("Amplitude")
        ax.grid()
        plt.show()

    def show_spectrogram(self):
        if not self.check_data():
            return

        fig, ax = plt.subplots(figsize=(8, 4))

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É
        Pxx, freqs, bins, im = ax.specgram(self.data, Fs=self.sample_rate, cmap='inferno', NFFT=2048, noverlap=1024)

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å log10(0)
        Pxx = np.log10(Pxx + 1e-10)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤
        Pxx = (Pxx - np.min(Pxx)) / (np.max(Pxx) - np.min(Pxx))  # –ü—Ä–∏–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        ax.imshow(Pxx, aspect='auto', extent=[bins.min(), bins.max(), freqs.min(), freqs.max()], origin='lower',
                  cmap='magma')

        ax.set_title("Spectrogram")
        ax.set_xlabel("Time (sec)")
        ax.set_ylabel("Frequency (Hz)")
        plt.show()

    def show_dft(self):
        if not self.check_data():
            return
        spectrum = np.fft.fft(self.data)
        frequencies = np.fft.fftfreq(len(self.data), d=1 / self.sample_rate)
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.plot(frequencies[:len(frequencies) // 2], np.abs(spectrum[:len(frequencies) // 2]), color='purple')
        ax.set_title("DFT Spectrum")
        ax.set_xlabel("Frequency (Hz)")
        ax.set_ylabel("Amplitude")
        ax.grid()
        plt.show()

    def show_3d_spectrogram(self):
        if not self.check_data():
            return
        nperseg = min(2048, len(self.data) // 10)
        f, t, Sxx = spectrogram(self.data, self.sample_rate, nperseg=nperseg)
        T, F = np.meshgrid(t, f)

        fig = plt.figure(figsize=(8, 6))
        ax = fig.add_subplot(111, projection='3d')
        ax.plot_surface(T, F, 10 * np.log10(Sxx + 1e-10), cmap="jet")
        ax.set_xlabel("Time (sec)")
        ax.set_ylabel("Frequency (Hz)")
        ax.set_zlabel("Magnitude (dB)")
        ax.set_title("3D Spectrogram")
        plt.show()


# –ó–∞–ø—É—Å–∫ GUI
root = tk.Tk()
app = WAVAnalyzer(root)
root.mainloop()
